import { useState, useEffect, useRef } from 'react';
import type { ChatMessage } from '../types';
import './AIChatbot.css';
import { Bot, User, Trash2, Send, CornerDownLeft } from 'lucide-react';

interface AIChatbotProps {
  isFloatingMode?: boolean;
}

const AIChatbot: React.FC<AIChatbotProps> = ({ isFloatingMode = false }) => {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // Kh·ªüi t·∫°o tin nh·∫Øn ch√†o m·ª´ng
    const welcomeMessage: ChatMessage = {
      id: '1',
      role: 'assistant',
      content: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI chuy√™n v·ªÅ t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn b√†i h·ªçc "T∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh v·ªÅ Nh√† n∆∞·ªõc c·ªßa d√¢n, do d√¢n, v√¨ d√¢n". H√£y ƒë·∫∑t c√¢u h·ªèi cho t√¥i nh√©!',
      timestamp: new Date()
    };
    setMessages([welcomeMessage]);
  }, []);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const generateId = () => {
    return Date.now().toString() + Math.random().toString(36).substr(2, 9);
  };

  const sendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;

    const apiKey = import.meta.env.VITE_GEMINI_API_KEY;
    if (!apiKey) {
      const errorMessage: ChatMessage = {
        id: generateId(),
        role: 'assistant',
        content: 'L·ªói: Ch∆∞a c·∫•u h√¨nh API key. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n ƒë·ªÉ c·∫•u h√¨nh VITE_GEMINI_API_KEY trong file .env',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
      return;
    }

    const userMessage: ChatMessage = {
      id: generateId(),
      role: 'user',
      content: inputMessage.trim(),
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    try {
      // T·∫°o prompt h·∫°n ch·∫ø ph·∫°m vi tr·∫£ l·ªùi cho Gemini
      const systemPrompt = `B·∫°n l√† m·ªôt gi√°o s∆∞ chuy√™n v·ªÅ t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh v√† l·ªãch s·ª≠ Vi·ªát Nam, ƒë·∫∑c bi·ªát am hi·ªÉu s√¢u s·∫Øc v·ªÅ ch·ªß ƒë·ªÅ "Nh√† n∆∞·ªõc c·ªßa d√¢n, do d√¢n, v√¨ d√¢n". 

NHI·ªÜM V·ª§: H√£y tr·∫£ l·ªùi chi ti·∫øt, ƒë·∫ßy ƒë·ªß v√† c√≥ chi·ªÅu s√¢u v·ªÅ c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn:

1. üèõÔ∏è T∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh v·ªÅ nh√† n∆∞·ªõc c·ªßa d√¢n, do d√¢n, v√¨ d√¢n
2. üìñ Kh√°i ni·ªám v√† √Ω nghƒ©a s√¢u s·∫Øc c·ªßa "c·ªßa d√¢n", "do d√¢n", "v√¨ d√¢n"
3. üë• Vai tr√≤ c·ªßa nh√¢n d√¢n trong nh√† n∆∞·ªõc theo t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh
4. üáªüá≥ √ù nghƒ©a v√† gi√° tr·ªã c·ªßa t∆∞ t∆∞·ªüng n√†y ƒë·ªëi v·ªõi Vi·ªát Nam hi·ªán ƒë·∫°i
5. üèóÔ∏è C√°ch th·ª©c x√¢y d·ª±ng v√† th·ª±c hi·ªán ch√≠nh quy·ªÅn ph·ª•c v·ª• nh√¢n d√¢n
6. üìú B·ªëi c·∫£nh l·ªãch s·ª≠ v√† ngu·ªìn g·ªëc t∆∞ t∆∞·ªüng n√†y
7. üîç So s√°nh v·ªõi c√°c t∆∞ t∆∞·ªüng ch√≠nh tr·ªã kh√°c tr√™n th·∫ø gi·ªõi

Y√äU C·∫¶U TR‡∏≤‡∏≤·ªêI L·ªúI:
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát r√µ r√†ng, d·ªÖ hi·ªÉu
- Cung c·∫•p v√≠ d·ª• c·ª• th·ªÉ v√† tr√≠ch d·∫´n n·∫øu c√≥ th·ªÉ
- Gi·∫£i th√≠ch ƒë·∫ßy ƒë·ªß, chi ti·∫øt, c√≥ chi·ªÅu s√¢u
- S·ª≠ d·ª•ng 300-800 t·ª´ cho m·ªôt c√¢u tr·∫£ l·ªùi ho√†n ch·ªânh
- C·∫•u tr√∫c r√µ r√†ng v·ªõi c√°c ƒë·∫ßu m·ª•c n·∫øu c·∫ßn thi·∫øt

N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn ch·ªß ƒë·ªÅ tr√™n, h√£y l·ªãch s·ª± gi·∫£i th√≠ch v√† h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng quay v·ªÅ ch·ªß ƒë·ªÅ ch√≠nh.

C√¢u h·ªèi c·∫ßn gi·∫£i ƒë√°p: "${inputMessage}"

H√£y tr·∫£ l·ªùi m·ªôt c√°ch th·∫•u ƒë√°o v√† gi√°o d·ª•c!`;

      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [
                {
                  text: systemPrompt
                }
              ]
            }
          ],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 2048,
          },
          safetySettings: [
            {
              category: "HARM_CATEGORY_HARASSMENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_HATE_SPEECH",  
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            }
          ]
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      const aiResponse = data.candidates?.[0]?.content?.parts?.[0]?.text || 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y.';

      const assistantMessage: ChatMessage = {
        id: generateId(),
        role: 'assistant',
        content: aiResponse,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, assistantMessage]);
    } catch (error) {
      console.error('L·ªói khi g·ªçi API:', error);
      
      let errorMessage = 'Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n.';
      
      if (error instanceof Error && error.message.includes('400')) {
        errorMessage = 'API key kh√¥ng h·ª£p l·ªá ho·∫∑c request kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.';
      } else if (error instanceof Error && error.message.includes('429')) {
        errorMessage = 'ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n s·ª≠ d·ª•ng API. Vui l√≤ng th·ª≠ l·∫°i sau.';
      } else if (error instanceof Error && error.message.includes('403')) {
        errorMessage = 'API key kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.';
      }

      const errorResponse: ChatMessage = {
        id: generateId(),
        role: 'assistant',
        content: errorMessage,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, errorResponse]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const clearChat = () => {
    const welcomeMessage: ChatMessage = {
      id: generateId(),
      role: 'assistant',
      content: 'Cu·ªôc tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c x√≥a. H√£y ƒë·∫∑t c√¢u h·ªèi m·ªõi v·ªÅ t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh nh√©!',
      timestamp: new Date()
    };
    setMessages([welcomeMessage]);
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('vi-VN', {
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const suggestedQuestions = [
    'Nh√† n∆∞·ªõc "c·ªßa d√¢n" c√≥ nghƒ©a l√† g√¨?',
    'S·ª± kh√°c bi·ªát gi·ªØa "do d√¢n" v√† "v√¨ d√¢n" l√† g√¨?',
    'T·∫°i sao H·ªì Ch√≠ Minh l·∫°i nh·∫•n m·∫°nh v·ªÅ vai tr√≤ c·ªßa nh√¢n d√¢n?',
    'T∆∞ t∆∞·ªüng n√†y c√≥ √Ω nghƒ©a g√¨ v·ªõi Vi·ªát Nam hi·ªán nay?',
    'L√†m th·∫ø n√†o ƒë·ªÉ x√¢y d·ª±ng ch√≠nh quy·ªÅn ph·ª•c v·ª• nh√¢n d√¢n?'
  ];

  return (
    <div className={`chatbot-container ${isFloatingMode ? 'floating-mode' : ''}`}>
      {!isFloatingMode && (
        <div className="chatbot-header">
          <h1>
            <Bot size={24} />
            Tr·ª£ L√Ω AI - T∆∞ T∆∞·ªüng H·ªì Ch√≠ Minh
          </h1>
          <div className="header-actions">
            <button className="clear-button" onClick={clearChat}>
              <Trash2 size={16} />
              X√≥a Chat
            </button>
          </div>
        </div>
      )}

      <div className="chat-messages">
        {messages.map((message) => (
          <div key={message.id} className={`message ${message.role}`}>
            <div className="message-avatar">
              {message.role === 'assistant' ? <Bot size={16} /> : <User size={16} />}
            </div>
            <div className="message-content">
              <div
                className="message-text"
                dangerouslySetInnerHTML={{
                  __html: message.content
                    .replace(/\n\n/g, '</p><p>')
                    .replace(/\n/g, '<br>')
                    .replace(/^/, '<p>')
                    .replace(/$/, '</p>')
                }}
              />
              <div className="message-time">{formatTime(message.timestamp)}</div>
            </div>
          </div>
        ))}
        {isLoading && (
          <div className="message assistant">
            <div className="message-content">
              <div className="typing-indicator">
                <span></span>
                <span></span>
                <span></span>
              </div>
            </div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      {!isFloatingMode && (
        <div className="suggested-questions">
          <h4>C√¢u h·ªèi g·ª£i √Ω:</h4>
          <div className="suggestions-grid">
            {suggestedQuestions.map((question, index) => (
              <button
                key={index}
                className="suggestion-button"
                onClick={() => setInputMessage(question)}
              >
                {question}
              </button>
            ))}
          </div>
        </div>
      )}

      <div className="chat-input">
        {isFloatingMode && (
          <div className="floating-actions">
            <button 
              className="floating-clear-button" 
              onClick={clearChat}
              title="X√≥a chat"
            >
              üóëÔ∏è
            </button>
          </div>
        )}
        <div className="input-container">
          <textarea
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="ƒê·∫∑t c√¢u h·ªèi v·ªÅ t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh..."
            rows={isFloatingMode ? 1 : 2}
            disabled={isLoading}
          />
          <button 
            onClick={sendMessage} 
            disabled={!inputMessage.trim() || isLoading}
            className="send-button"
            aria-label="G·ª≠i"
          >
            {isLoading ? <div className="typing-indicator-small"></div> : <Send size={16} />}
          </button>
        </div>
        {!isFloatingMode && (
          <p className="input-hint">
            <CornerDownLeft size={12} style={{ display: 'inline-block', marginRight: '4px' }} />
            Nh·∫•n Enter ƒë·ªÉ g·ª≠i, Shift+Enter ƒë·ªÉ xu·ªëng d√≤ng
          </p>
        )}
      </div>
    </div>
  );
};

export default AIChatbot;
